#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h> //
#include <sys/shm.h>  // shared mem library routines like shmget(), shmat(), shmdt()
#include <sys/stat.h> // flags like S_XXXX
#include <unistd.h>   // contains calls like fork(0 wait() etc

#define MAX_ELEMENTS 100
int A[MAX_ELEMENTS], B[MAX_ELEMENTS];
int *C;
//shared Memory(across parent and child)
int shmKey = 1234;
main()
{
	int pid0, pid1, pid2, pid3;
	int a, b, c, d;
	int n = 4, numElementsPerChild = MAX_ELEMENTS / n, i;
	int shmId, shmSize = MAX_ELEMENTS * sizeof(int);

	//Create share memory segment
	shmId = shmget(shmKey, shmSize, IPC_CREAT | 0666);

	//shmat() system return the address which is shared between
	//all children and parent also.
	C = (int *)shmat(shmId, NULL, 0);
	int j,k;
	for(j=0; j<MAX_ELEMENTS; j++){
		A[j] = (rand() % 100) + 1;
	}
	for(k=0; k<MAX_ELEMENTS; k++){
		B[k] = (rand() % 100) + 1;
	}
	
	// create a child
   if ((pid0=fork()) == 0) {
     int childId = 0, i;
     printf("Child0 = %d\n", getpid());
     // FILL IN: child to compute C[i] = A[i] + B[i] for its part 
     exit(100);
   } else if ((pid1=fork()) == 0) {
     // FILL IN:simlar code like child 0 but childId = 1;
     exit(200);
   } else if ((pid2=fork()) == 0) {
     // FILL IN:simlar code like child 0
     exit(3);
   } else if ((pid3=fork()) == 0) {
     // FILL IN:simlar code like child 0
     exit(4);
   }
}
